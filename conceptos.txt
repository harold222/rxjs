Las extensiones reactives nos permiten tener informacion en tiempo real,
Se pueden usar para: 
    * Manejar eventos en la interfaz de usuario
    * Cuando es necesario notificar sobre cambios
    * En comunicacion con sockets
    * En flujos de informacion-

Piezas fundamentales de la programacion reactiva: 
    * Observables = Fuente de informacion, pueden emitir multiples valores.
        Pueden emitir errores, Pueden ser infinitos, finitos, sincronos
        o asincronos.

    * Subscribers = Estos se subscriben a un observable, consumen la data
        del observable, pueden recinir los errores y eventos.

    * Operators = Usados para transformar los observables como group,
        map, scan.
        Son usados para filtrar los observables como filter, distinct,
        skip, debounce.
        Usados para combinar observables o retornarlos

Beneficios = 
    evitar el callback
    Trabajar de forma simple tareas asincronas
    Uso de operadores para simplificar el trabajo
    
Diagramas de canicas
    click$ = estandar observables con signo dolar
------------------ = linea

Operadores = 
Es una funcion que esta presente en un observable y sirve para
unirlos, cambiarlos, evualarlos, etc

* Of = este operador permite emitir valores en secuencia de Manera
    sincrona cualquier tipo de dato, una vez ya emite todos los valores
    automaticamente se completa el observable
* fromEvent = permite crear observables en base a un event target o del
    document ejemplo con el scroll o cambio dimension pantalla, click

* range = crea un observable con secuencia de numeros en base a un rango
    pueden ser asincronos

* map = transforma lo que emite un observble en algo que se desee.

* pluck = cuando necesito extraer un valor de un objeto y que este sea la salida del observable ej: 
    objeto = { v: 1 } .pluck('v') = respuesta 1

* mapTo = Permite transformar la entrada en una salida especifica
    ejemplo = entradas 1, 2, 3, 4 y siempre la salida sera 0 o una letra o un objeto

* Reduce = tiene la misma funcionalidad que el reduce de jaavascript, 
es una funcion acumuladora a las funciones producidas por el observable
no se tienen emisiones hasta que se complete el observable

* Scan = hace lo mismo que el reduce con la diferencia que cuando los valores
son emitidos por el observable inmediatamente emite el valor

* distinct = Emite valores que no fueron repetidos en toda la emision
    ej = 1,2,1,4,2,3 = salida = 1,2,4,3

* DistinctUntilChanged = emite valores donde el anterior valor no fue repetido
    ej = 1,2,1,3,2,4,4 = salida = 1,2,1,3,2,4

* DistinctUntilKeyChanged = lo mismo que el anterior pero permite tomar una key
    en un objeto

* debounceTime = permite emitir valores depues de cierto tiempo, si se emiten
valores antes de cumplir ese tiempo, no se emitiran, ej = este puede servir
junto con DistinctUntilChanged para un input

* Throttletime = Es parecido al debounceTime, pero este emite el valor y luego
espera el tiempo determinado, en este se puede tomar el primer y ultimo valor

* SampleTime = ultimo valor emitido en un tiempo determinado, muy parecido
al debounceTime

----------------------------------------------------------
TRANSFORMACION = 

* mergeAll = trabaja con observables que internamente retornan observables
se completa hasta que todos los observables hijos se terminen



















